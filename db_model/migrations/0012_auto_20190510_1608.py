# Generated by Django 2.2.1 on 2019-05-10 08:08

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
        ('db_model', '0011_auto_20190510_1416'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='tag',
            options={'ordering': ['tagId'], 'verbose_name': '文章标签表', 'verbose_name_plural': '文章标签表'},
        ),
        migrations.AlterModelOptions(
            name='type',
            options={'ordering': ['typeId'], 'verbose_name': '文章类型表', 'verbose_name_plural': '文章类型表'},
        ),
        migrations.AlterModelOptions(
            name='user',
            options={'ordering': ['-userId'], 'verbose_name': '用户表', 'verbose_name_plural': '用户表'},
        ),
        migrations.AlterModelManagers(
            name='user',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='user',
            name='createTime',
        ),
        migrations.RemoveField(
            model_name='user',
            name='lastLoginTime',
        ),
        migrations.AddField(
            model_name='user',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='user',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='user',
            name='first_name',
            field=models.CharField(blank=True, max_length=30, verbose_name='first name'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='user',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='user',
            name='last_name',
            field=models.CharField(blank=True, max_length=150, verbose_name='last name'),
        ),
        migrations.AddField(
            model_name='user',
            name='password',
            field=models.CharField(default='Passw0rd123', max_length=128, verbose_name='用户密码'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='article',
            name='articleTags',
            field=models.ManyToManyField(to='db_model.Tag'),
        ),
        migrations.AlterField(
            model_name='article',
            name='modifyTime',
            field=models.DateTimeField(auto_now=True, verbose_name='最近修改时间'),
        ),
        migrations.AlterField(
            model_name='banner',
            name='type',
            field=models.CharField(max_length=2, verbose_name='资源类型（0：图片   1：视频）'),
        ),
        migrations.AlterField(
            model_name='likerel',
            name='articleId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db_model.Article', verbose_name='文章'),
        ),
        migrations.AlterField(
            model_name='likerel',
            name='userId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='用户'),
        ),
        migrations.AlterField(
            model_name='user',
            name='status',
            field=models.CharField(default='00', max_length=4, verbose_name='账号状态（00：有效  99：注销）'),
        ),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
        ),
    ]
